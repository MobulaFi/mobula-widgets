[{"C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\App.js":"1","C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\index.js":"2","C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\components\\StockQuote.js":"3","C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\components\\CoinTicker.js":"4","C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\components\\CoinPrice.js":"5"},{"size":489,"mtime":1662112688988,"results":"6","hashOfConfig":"7"},{"size":675,"mtime":1662107815631,"results":"8","hashOfConfig":"7"},{"size":4034,"mtime":1662112514533,"results":"9","hashOfConfig":"7"},{"size":4238,"mtime":1662113138502,"results":"10","hashOfConfig":"7"},{"size":5284,"mtime":1662113124259,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ag9v1",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\App.js",[],"C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\index.js",[],"C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\components\\StockQuote.js",["24","25","26","27","28","29","30"],"import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\";\r\nimport axiosInstance from \"./../index\";\r\n\r\nconst MARKET_STACK_QUOTE_URL = `${process.env.REACT_APP_MARKETSTACK_BASE_URL}/intraday`;\r\nconst MARKET_STACK_TICKER_URL = `${process.env.REACT_APP_MARKETSTACK_BASE_URL}/tickers`;\r\n\r\nexport function formatAmount(amount) {\r\n  return String(amount).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport function getTokenPrice(price) {\r\n  if (price) {\r\n    //Making sure we're getting a number without e-7 etc..\r\n    price = parseFloat(String(price)).toFixed(\r\n      String(price).includes(\"-\")\r\n        ? parseInt(String(price).split(\"-\")[1]) + 2\r\n        : String(price).split(\".\")[1]?.length || 0\r\n    );\r\n\r\n    if (parseFloat(price) > 1000) {\r\n      return formatAmount(parseInt(price)).slice(0, 6);\r\n    } else if (parseFloat(price) < 0.0001) {\r\n      const exp = price.match(/0\\.0+[1-9]/)?.[0] || \"\";\r\n      return (\r\n        price.split(\".\")[0] +\r\n        \".0..0\" +\r\n        price.split(exp.slice(0, exp.length - 2))[1].slice(1, 8)\r\n      );\r\n    } else {\r\n      return price.slice(0, 6);\r\n    }\r\n  } else if (isNaN(price)) {\r\n    return <>{\"--\"}</>;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\nexport function getTokenPercentage(status) {\r\n  if (status == undefined) {\r\n    try {\r\n    } catch (err) {}\r\n    return \"-- \";\r\n  }\r\n  return status.toFixed(2);\r\n}\r\n\r\nfunction StockQuote(props) {\r\n  const [tokens, setTokens] = useState([{}]);\r\n  const pro = props.props.symbol;\r\n  //   pro return \"['SAFU','BTC','ETH']\"\r\n  console.log(pro);\r\n  let tokenParse = JSON.parse(pro);\r\n  console.log(props);\r\n\r\n  const supabase = createClient(\r\n    \"https://ylcxvfbmqzwinymcjlnx.supabase.co\",\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlsY3h2ZmJtcXp3aW55bWNqbG54Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjAyMTMxMzksImV4cCI6MTk3NTc4OTEzOX0.nuNpRLu2mWB5hvrJqwlishqGxfzm1qT2hPAXLCv6gNY\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    supabase\r\n      .from(\"assets\")\r\n      .select(\"symbol,price,logo,name,market_cap,price_change_24h,rank\")\r\n      .then((r) => {\r\n        if (r.data) {\r\n          let newArr = [];\r\n          let filteredData;\r\n          for (let i = 0; i < tokenParse.length; i++) {\r\n            filteredData = r.data.filter(\r\n              (entry) => entry.symbol === tokenParse[i]\r\n            );\r\n            newArr = [...newArr, filteredData[0]];\r\n          }\r\n          setTokens(newArr);\r\n          console.log(tokens);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container-block\">\r\n      {tokens?.map((token) => {\r\n        return (\r\n          <div className=\"box-price-block\">\r\n            <div>\r\n              <img\r\n                src={token.logo}\r\n                alt={`${token.name} logo`}\r\n                className=\"token-logo-block\"\r\n              />\r\n              <p className=\"text-token-name-block\">{token.name}</p>\r\n              <p className=\"text-price-name-block\">\r\n                ${getTokenPrice(token.price)}\r\n              </p>\r\n\r\n              <p className=\"mobula-text\">\r\n                <span style={{ color: \"var(--mobula)\" }}>by</span> Mobula.fi\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"percentage-box-block\"\r\n              style={{\r\n                color:\r\n                  token.price_change_24h < 0\r\n                    ? \"var(--red)\"\r\n                    : token.price_change_24h === 0\r\n                    ? \"var(--mobula)\"\r\n                    : \"var(--green)\",\r\n                border:\r\n                  token.price_change_24h < 0\r\n                    ? \"1px solid var(--red)\"\r\n                    : token.price_change_24h === 0\r\n                    ? \"var(--mobula)\"\r\n                    : \"1px solid var(--green)\",\r\n              }}\r\n            >\r\n              {getTokenPercentage(token.price_change_24h)}%\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StockQuote;\r\n","C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\components\\CoinTicker.js",["31","32","33","34"],"C:\\Users\\Veeno\\Desktop\\fse\\react-widget\\src\\components\\CoinPrice.js",["35","36","37","38"],"import React, { useState, useEffect } from \"react\";\r\nimport { createClient, SupabaseClient } from \"@supabase/supabase-js\";\r\n// import { getTokenPrice, formatBigAmount } from \"../../utils/formater.tsx\";\r\n\r\nexport function formatAmount(amount) {\r\n  return String(amount).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport function getTokenPrice(price) {\r\n  if (price) {\r\n    //Making sure we're getting a number without e-7 etc..\r\n    price = parseFloat(String(price)).toFixed(\r\n      String(price).includes(\"-\")\r\n        ? parseInt(String(price).split(\"-\")[1]) + 2\r\n        : String(price).split(\".\")[1]?.length || 0\r\n    );\r\n\r\n    if (parseFloat(price) > 1000) {\r\n      return formatAmount(parseInt(price)).slice(0, 6);\r\n    } else if (parseFloat(price) < 0.0001) {\r\n      const exp = price.match(/0\\.0+[1-9]/)?.[0] || \"\";\r\n      return (\r\n        price.split(\".\")[0] +\r\n        \".0..0\" +\r\n        price.split(exp.slice(0, exp.length - 2))[1].slice(1, 8)\r\n      );\r\n    } else {\r\n      return price.slice(0, 6);\r\n    }\r\n  } else if (isNaN(price)) {\r\n    return <>{\"--\"}</>;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport function getTokenPercentage(status) {\r\n  if (status == undefined) {\r\n    try {\r\n    } catch (err) {}\r\n    return \"-- \";\r\n  }\r\n  return status.toFixed(2);\r\n}\r\n\r\nexport function formatBigAmount(amount, precision = 3) {\r\n  // @ts-ignore\r\n  amount = formatAmount(parseInt(amount));\r\n  let letter;\r\n  switch (amount.split(\",\").length) {\r\n    case 1:\r\n      letter = \"\";\r\n      break;\r\n    case 2:\r\n      letter = \"k\";\r\n      break;\r\n    case 3:\r\n      letter = \"M\";\r\n      break;\r\n    case 4:\r\n      letter = \"B\";\r\n      break;\r\n    case 5:\r\n      letter = \"T\";\r\n      break;\r\n    case 6:\r\n      letter = \"Z\";\r\n      break;\r\n  }\r\n\r\n  if (precision) {\r\n    return (\r\n      amount.split(\",\")[0] +\r\n      \".\" +\r\n      amount\r\n        .split(\",\")\r\n        .slice(1)\r\n        .join(\"\")\r\n        .slice(0, precision - amount.split(\",\")[0].length) +\r\n      letter\r\n    );\r\n  } else {\r\n    return amount.split(\",\")[0] + letter;\r\n  }\r\n}\r\n\r\nexport default function CoinPrice(props) {\r\n  const [tokens, setTokens] = useState([]);\r\n  const supabase = createClient(\r\n    \"https://ylcxvfbmqzwinymcjlnx.supabase.co\",\r\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlsY3h2ZmJtcXp3aW55bWNqbG54Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2NjAyMTMxMzksImV4cCI6MTk3NTc4OTEzOX0.nuNpRLu2mWB5hvrJqwlishqGxfzm1qT2hPAXLCv6gNY\"\r\n  );\r\n  useEffect(() => {\r\n    supabase\r\n      .from(\"assets\")\r\n      .select(\"symbol,price,logo,name,market_cap,price_change_24h,rank\")\r\n      .then((r) => {\r\n        if (r.data) {\r\n          const rightToken = r.data.filter((entry) => entry.rank < 8);\r\n          console.log(rightToken);\r\n          setTokens(rightToken);\r\n        }\r\n      });\r\n    console.log(tokens);\r\n    if (tokens) {\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container-price-marquee\">\r\n      <div className=\"powered-price-marquee\">\r\n        <img\r\n          src=\"https://mobula.fi/WhiteRound.png\"\r\n          alt=\"Mobula logo\"\r\n          style={{ height: \"44px\", width: \"44px\", marginRight: \"10px\" }}\r\n          className=\"mobula-logo-price-marquee\"\r\n        />\r\n        <div className=\"powered-box-price-marquee\">\r\n          <p className=\"powered-text-price-marquee\">Powered by</p>\r\n          <p className=\"mobula-text-price-marquee\">Mobula.fi</p>\r\n        </div>\r\n      </div>\r\n      {tokens.map((token) => {\r\n        return (\r\n          <div className=\"between-price-marquee\">\r\n            <div className=\"left-price-marquee\">\r\n              <img\r\n                src={token.logo}\r\n                alt=\"Mobula logo\"\r\n                style={{ height: \"35px\", width: \"35px\", marginRight: \"10px\" }}\r\n                className=\"mobula-logo-price-marquee\"\r\n              />\r\n              <div className=\"powered-box-price-marquee\">\r\n                <p className=\"token-text-price-marquee\">{token.name}</p>\r\n                <p className=\"fiat-text-price-marquee\">{token.symbol}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"right-price-marquee\">\r\n              <p className=\"token-text-price-marquee\">\r\n                {getTokenPrice(token.price)}\r\n              </p>\r\n              <div className=\"price-token-price-marquee\">\r\n                <div\r\n                  style={{\r\n                    background:\r\n                      token.price_change_24h < 0\r\n                        ? \"var(--red)\"\r\n                        : token.price_change_24h === 0\r\n                        ? \"var(--mobula)\"\r\n                        : \"var(--green)\",\r\n                  }}\r\n                  className=\"percentage-circle\"\r\n                ></div>\r\n                <p\r\n                  style={{\r\n                    color:\r\n                      token.price_change_24h < 0\r\n                        ? \"var(--red)\"\r\n                        : token.price_change_24h === 0\r\n                        ? \"var(--mobula)\"\r\n                        : \"var(--green)\",\r\n                  }}\r\n                  className=\"percentage-text-price-marquee\"\r\n                >\r\n                  {getTokenPercentage(token.price_change_24h)}%\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"39","severity":1,"message":"40","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":14},{"ruleId":"39","severity":1,"message":"43","line":3,"column":24,"nodeType":"41","messageId":"42","endLine":3,"endColumn":38},{"ruleId":"39","severity":1,"message":"44","line":4,"column":8,"nodeType":"41","messageId":"42","endLine":4,"endColumn":21},{"ruleId":"39","severity":1,"message":"45","line":6,"column":7,"nodeType":"41","messageId":"42","endLine":6,"endColumn":29},{"ruleId":"39","severity":1,"message":"46","line":7,"column":7,"nodeType":"41","messageId":"42","endLine":7,"endColumn":30},{"ruleId":"47","severity":1,"message":"48","line":41,"column":14,"nodeType":"49","messageId":"50","endLine":41,"endColumn":16},{"ruleId":"51","severity":1,"message":"52","line":80,"column":6,"nodeType":"53","endLine":80,"endColumn":8,"suggestions":"54"},{"ruleId":"39","severity":1,"message":"43","line":2,"column":24,"nodeType":"41","messageId":"42","endLine":2,"endColumn":38},{"ruleId":"55","severity":1,"message":"56","line":41,"column":3,"nodeType":"57","messageId":"58","endLine":60,"endColumn":4},{"ruleId":"51","severity":1,"message":"59","line":98,"column":6,"nodeType":"53","endLine":98,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":106,"column":35,"nodeType":"49","messageId":"63","endLine":106,"endColumn":36},{"ruleId":"39","severity":1,"message":"43","line":2,"column":24,"nodeType":"41","messageId":"42","endLine":2,"endColumn":38},{"ruleId":"47","severity":1,"message":"48","line":38,"column":14,"nodeType":"49","messageId":"50","endLine":38,"endColumn":16},{"ruleId":"55","severity":1,"message":"56","line":50,"column":3,"nodeType":"57","messageId":"58","endLine":69,"endColumn":4},{"ruleId":"51","severity":1,"message":"64","line":107,"column":6,"nodeType":"53","endLine":107,"endColumn":8,"suggestions":"65"},"no-unused-vars","'moment' is defined but never used.","Identifier","unusedVar","'SupabaseClient' is defined but never used.","'axiosInstance' is defined but never used.","'MARKET_STACK_QUOTE_URL' is assigned a value but never used.","'MARKET_STACK_TICKER_URL' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'supabase', 'tokenParse', and 'tokens'. Either include them or remove the dependency array.","ArrayExpression",["66"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'props.props.symbol'. Either include it or remove the dependency array.",["67"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'supabase' and 'tokens'. Either include them or remove the dependency array.",["68"],{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [supabase, tokenParse, tokens]",{"range":"75","text":"76"},"Update the dependencies array to be: [props.props.symbol]",{"range":"77","text":"78"},"Update the dependencies array to be: [supabase, tokens]",{"range":"79","text":"80"},[2557,2559],"[supabase, tokenParse, tokens]",[2574,2576],"[props.props.symbol]",[2838,2840],"[supabase, tokens]"]